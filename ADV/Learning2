'Asynchronous: It means break-down or having a pause in the language'
______________
|having pause| |----> 1. network calls 
-------------- |----> 2. write/read files
               |----> 3. time fn
               |-----> 4. userInput and more...
For above explanation, for these all four things, pause (async) works.

Event Loop: (Akshay Sir) (Already Done)

Closures: Basically, this is a function, they remember the environment in which they created. 
This means that, function can retain the variables which are declared outside of it.

Promises:
So, we can create a async behavior of javascript, by using a promises.
Promises are the utility in js.

* The way we create promise, using 'new' keyword:
fetchData(){
    return new Promise();
}

* Promise takes a callback also known as fxn.
* It takes two parameters resolve, rejected


'Prototypal Inheritance':
I understand this from gpt.
üß∏ Imagine This:
You have a toy box üéÅ (that‚Äôs your object).
You open it and look for a toy (a property or method).
If the toy isn‚Äôt inside, you ask your mom üë© (the prototype):
‚ÄúMom, do you have that toy?‚Äù
If your mom doesn‚Äôt have it either, she asks grandma üëµ (the next prototype).
This keeps going until someone finds the toy ‚Äî or you reach the end (no one has it).
That chain ‚Äî you ‚Üí mom ‚Üí grandma ‚Äî is the prototype chain.
And this passing down of toys (properties) is called prototypal inheritance.

'Quiz: Which of the following best describes prototypal inheritance in JavaScript?
a. Objects inherit directly from other objects:  ‚úÖ ¬† 
b. Objects inherit only from their constructor  
c. Objects create a new scope for each instance
d. Objects do not have inheritance capabilities 

Option (a) correct -> (Reason: Your choice, ‚ÄúObjects inherit directly from other objects,‚Äù is correct because, in JavaScript, prototypal inheritance means that objects can directly reference and access properties from another object, known as the prototype. This fundamental feature allows for a flexible and dynamic way of creating objects and sharing behavior in JavaScript).
----------------------------------------------------------------------------
async/await/Promise-all
Instead of .then and .catch we can use async-await
We only use await when async already used.
 